spring.application.name=iap-API
#spring.datasource.url=jdbc:postgresql://postgresql:${POSTGRES_PORT}/${POSTGRES_DB}?allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.url=jdbc:postgresql://localhost:5432/dev_env?allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.platform=postgresql
spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.username=${POSTGRES_USER}
#spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.username=dev
spring.datasource.password=dev
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# JWT Configuration
jwt.secret_key=ZiWocuK8kJgehTLRlLBxoqrv1nKdY4IguMcFqAJB6oS7sWYeCw3KHolSCXiUiweC
# 20 minutes
jwt.expirationtime.access=1200000
# 2 days
jwt.expirationtime.refresh=172800000

# Remove for production
spring.jpa.hibernate.ddl-auto=create

# Cognito
spring.security.oauth2.client.registration.cognito.clientId=66v9ved46iqmn4ffs9saan6kc
spring.security.oauth2.client.registration.cognito.clientSecret=14vnu6fusktnp4s4dthaocv7n0v25r0qk80pa2kvn6sfso0h9kd2
spring.security.oauth2.client.registration.cognito.scope=openid
spring.security.oauth2.client.registration.cognito.redirect-uri=http://localhost:3000/exchange
spring.security.oauth2.client.registration.cognito.clientName=TaskTracker

spring.security.oauth2.client.provider.cognito.issuerUri=https://cognito-idp.eu-south-2.amazonaws.com/eu-south-2_EYGksIH7P
spring.security.oauth2.client.provider.cognito.tokenEndpoint=https://tasktracker.auth.eu-south-2.amazoncognito.com/oauth2/token
spring.security.oauth2.client.provider.cognito.user-name-attribute=cognito:username
